{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MergeSort = () => {\n  _s();\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n  const mergeSort = (values, ids, timer, l, r) => {\n    if (l >= r) return;\n    let mid = Math.floor((l + r) / 2);\n    mergeSort(values, ids, timer - 1, l, mid);\n    mergeSort(values, ids, timer - 1, mid + 1, r);\n    setTimeout(() => {\n      let color = [];\n      for (let i = 0; i < 3; i++) color.push(Math.floor(Math.random() * 200));\n      for (let i = l; i <= r; i++) document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\n      for (let i = l; i <= r; i++) {\n        for (let j = i + 1; j <= r; j++) {\n          if (values[i] > values[j]) {\n            [values[i], values[j]] = [values[j], values[i]];\n            [ids[i], ids[j]] = [ids[j], ids[i]];\n            let new_ids = [...ids];\n            document.getElementById(new_ids[i]).style.transform = `translateX(${i * 11}px)`;\n            document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\n          }\n        }\n      }\n    }, timer * myState.speed * 5);\n  };\n  const solve = () => {\n    mergeSort(values, ids, Math.ceil(Math.log(values.length + 1)), 0, values.length - 1);\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false\n      });\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)'\n      });\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50);\n  };\n  useEffect(() => {\n    if (myState.algorithm === 'merge') {\n      if (myState.play) solve();\n    }\n  }, [myState.play]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(MergeSort, \"skz74H6TDd0rxZTKTPFjX8UUY3g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = MergeSort;\nexport default MergeSort;\nvar _c;\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Fragment","_Fragment","jsxDEV","_jsxDEV","MergeSort","_s","myState","state","updateProps","dispatch","values","map","item","ids","mergeSort","timer","l","r","mid","Math","floor","setTimeout","color","i","push","random","document","getElementById","childNodes","style","backgroundColor","j","new_ids","transform","speed","solve","ceil","log","length","type","_play","algorithm","play","_c","$RefreshReg$"],"sources":["/Users/pranav/Downloads/AlgoVisuals-main/src/components/MergeSort.js"],"sourcesContent":["import React,{useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst MergeSort = () => {\r\n   const myState = useSelector(state => state.updateProps);\r\n   const dispatch = useDispatch();\r\n\r\n   let values = myState.values.map((item) => item[0]);\r\n   let ids = myState.values.map((item) => item[1]);\r\n\r\n   const mergeSort = (values,ids,timer,l,r) => {\r\n      if(l >= r)\r\n         return;\r\n\r\n      let mid = Math.floor((l+r)/2);\r\n\r\n      mergeSort(values,ids,timer-1,l,mid);\r\n      mergeSort(values,ids,timer-1,mid+1,r);\r\n\r\n      setTimeout(() => {\r\n         let color = [];\r\n         for(let i = 0; i < 3; i++)\r\n            color.push(Math.floor(Math.random()*200));\r\n   \r\n         for(let i = l; i <= r; i++)\r\n            document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\r\n\r\n         for(let i = l; i <= r; i++){\r\n         for(let j = i+1; j <= r; j++){\r\n\r\n            if(values[i]>values[j]){\r\n               [values[i],values[j]] = [values[j],values[i]];\r\n               [ids[i],ids[j]] = [ids[j],ids[i]];\r\n               \r\n               let new_ids = [...ids];\r\n\r\n               document.getElementById(new_ids[i]).style.transform = `translateX(${i*11}px)`;\r\n               document.getElementById(new_ids[j]).style.transform = `translateX(${j*11}px)`;\r\n               }\r\n            }\r\n         }\r\n      },timer*myState.speed*5);\r\n   }\r\n\r\n   const solve = () => {\r\n      mergeSort(values,ids,Math.ceil(Math.log(values.length+1)),0,values.length-1);\r\n\r\n      setTimeout(() => {\r\n         dispatch({\r\n            type:'PLAY_PAUSE',\r\n            _play:false\r\n         })\r\n\r\n         dispatch({\r\n            type:'UPDATE_COLOR',\r\n            color: 'rgb(0, 182, 0)'\r\n         })\r\n      },5*myState.speed*(1+Math.ceil(Math.log(values.length+1)))+50);\r\n   };\r\n\r\n   useEffect(() => {\r\n      if(myState.algorithm==='merge'){\r\n         if(myState.play)\r\n            solve();\r\n      }\r\n   },[myState.play]);\r\n\r\n   return <></>;\r\n}\r\n\r\nexport default MergeSort;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}